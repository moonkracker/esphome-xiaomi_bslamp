# ------------------------------------------------------------------------
# Behavior: default
#
# * Presets that resemble the original Xiaomi firmware
#   (one group of RGB colors, one group of white light colors)
# * Tapping the power button, toggles the light
# * Holding the power button, turns on night light mode
# * Tapping the color button, activates the next preset
# * Holding the color button, activates the next preset group
# * Touching the slider sets the brightness level and turns on the lamp
# * When the light is on, the front panel illumination is on
# * When the night light is on, only the power button is illuminated
# ------------------------------------------------------------------------

# A global variable to keep track of the brightness level. This one is
# used by the update_front_panel script to represent the brightness level
# using the front panel illumination.
#
# This variable is used instead of querying the light component directly,
# because that brightness level may vary during a light transition. The
# behavior that I want: when you touch the front panel slider at 75%, then
# the illumination rises directly to that level, while the light might do
# a smooth transition.
globals:
  - id: current_brightness
    type: float
    initial_value: "0.0"

# This script updates the front panel illumination.
script:
  - id: update_front_panel
    mode: restart
    then:
      - front_panel.turn_off_leds: ALL
      # In rgb or white light mode, turn on the front panel illumination,
      # and show the current brightness level.
      - if:
          condition:
            or:
              - text_sensor.state:
                  id: my_light_mode
                  state: rgb
              - text_sensor.state:
                  id: my_light_mode
                  state: white
          then:
            - front_panel.turn_on_leds: [ POWER, COLOR ]
            - front_panel.set_level: !lambda return id(current_brightness);
      # In night light mode, turn off the front panel illumination, except
      # for the power button.
      - if:
          condition:
            - text_sensor.state:
                id: my_light_mode
                state: night
          then:
            - front_panel.turn_on_leds: [ POWER ]
      - front_panel.update_leds:

# This component controls the LED lights of the lamp.
light:
  - platform: xiaomi_bslamp2
    id: my_light
    name: ${light_name}
    default_transition_length: ${default_transition_length}

    # When the brightness changes, update the front panel illumination.
    on_brightness:
      then:
        - globals.set:
            id: current_brightness
            value: !lambda return x;
        - script.execute: update_front_panel

    # You can use any effects that you like. These are just examples.
    effects:
      - random:
          name: "Slow Random"
          transition_length: 30s
          update_interval: 30s
      - random:
          name: "Fast Random"
          transition_length: 3s
          update_interval: 3s
      - lambda:
          name: Breathing Red
          update_interval: 7s
          lambda: |-
            #define RED 1.0,0.0,0.0
            static int state = 0;
            auto call = id(my_light).turn_on();
            call.set_transition_length(15000);
            if (state == 0) 
              call.set_brightness(0.02);
            
            else if (state == 1) {
              call.set_rgb(RED); 
              call.set_brightness(1.0);
            }

            state ++;
            if (state == 2)
              state = 0;
            
            call.perform();
      - lambda:
          name: Random Flicker
          update_interval: 200 ms
          lambda: |-
            auto call = id(my_light).turn_on();
            float r = random_float() * 2.0f - 1.0f; 
            r =  r * r * r;
            call.set_transition_length(r);
            //static double br=id(global_brightness);
            call.set_brightness(0.7 + r/10);
            call.set_publish(false);
            call.set_save(false);
            call.perform();
      - lambda:
          name: Chill Mode
          update_interval: 70s
          lambda: |-
            auto call = id(my_light).turn_on();
            call.set_transition_length(55000);
            call.set_white(0.0);
            esphome::Color c = esphome::Color::random_color();
            call.set_rgb((c.red%255)/255.0, (c.green%255)/255.0, (c.blue%255)/255.0);
            call.set_publish(false);
            call.set_save(false);
            call.perform();
      - lambda:
          name: Chill Mode (Vibrant)
          update_interval: 120s
          lambda: |-
            auto call = id(my_light).turn_on();
            call.set_transition_length(800);
            call.set_white(0.0);
            esphome::Color c = esphome::Color::random_color();
            call.set_rgb((c.red%128)/255.0, (c.green%128)/255.0, (c.blue%128)/255.0);
            call.set_publish(false);
            call.set_save(false);
            call.perform();
      - lambda:
          name: Disco
          update_interval: 500ms
          lambda: |-
            auto call = id(my_light).turn_on();
            //call.set_transition_length(rand() % 400 + 1);
            call.set_transition_length(500);
            call.set_white(0.0);
            esphome::Color c = esphome::Color::random_color();
            call.set_rgb((c.red)/255.0, (c.green)/255.0, (c.blue)/255.0);
            call.set_publish(false);
            call.set_save(false);
            call.perform();
      - lambda:
          name: WTF
          update_interval: 200ms
          lambda: |-
            auto call = id(my_light).turn_on();
            call.set_transition_length(200);
            call.set_white(0.0);
            call.set_brightness((rand() % 255 + 1) / 255.0);
            call.set_color_temperature(rand() % 2 == 0 ? 0: 512);
            call.perform();
      - strobe:
          name: Lightning
          colors:
            - state: True
              brightness: 100%
              red: 90%
              green: 90%
              blue: 100%
              white: 0%
              duration: 50ms
            - state: False
              duration: 50ms
            - state: True
              brightness: 100%
              red: 90%
              green: 90%
              blue: 100%
              white: 0%
              duration: 160ms
            - state: False
              duration: 50ms
            - state: True
              brightness: 100%
              red: 90%
              green: 90%
              blue: 100%
              white: 0%
              duration: 50ms
            - state: False
              duration: 3000ms
      - strobe:
          name: In Alarm
          colors:
            - state: True
              red: 100%
              blue: 0%
              green: 0%
              white: 0%
              duration: 150ms
            - state: False
              duration: 100ms
            - state: True
              red: 100%
              blue: 0%
              green: 0%
              white: 0%  
              duration: 150ms
            - state: False
              duration: 100ms
            - state: True
              red: 0%
              blue: 100%
              green: 0%
              white: 0%
              duration: 150ms
            - state: False
              duration: 100ms
            - state: True
              red: 0%
              blue: 100%
              green: 0%
              white: 0%
              duration: 150ms
            - state: False
              duration: 100ms
      - strobe:
          name: Strobe Effect
          colors:
            - state: True
              red: 100%
              green: 90%
              blue: 0%
              white: 0%
              duration: 50ms
            - state: False
              duration: 25ms
            - state: True
              red: 0%
              green: 100%
              blue: 0%
              white: 0%
              duration: 50ms
      - lambda:
          name: Breathing
          update_interval: 16s
          lambda: |-
            static int state = 0;
            static int color = 1;
            auto call = id(my_light).turn_on(); //the id of your light
            call.set_transition_length(15000);
            if (state == 0) 
            {
            call.set_brightness(1.0);
            }
            else if (state == 1)
            {
            call.set_brightness(0.02);
            }
            call.perform();
            state ++;
            if (state == 2){
            state = 0;
            }
      - lambda:
          name: RGB Breathing
          update_interval: 16s
          lambda: |-
            #define Color1 1.0, 0.0, 0.0 //These are the colors defined, feel free to change or extend the list
            #define Color2 1.0, 0.5, 0.0 //if you extend the list, dont forget to add them in the switch loop below
            #define Color3 1.0, 1.0, 0.0 //and remember to adjust the reset counter at the bottom
            #define Color4 0.5, 1.0, 0.0
            #define Color5 0.0, 1.0, 0.0
            #define Color6 0.0, 1.0, 0.5
            #define Color7 0.0, 1.0, 1.0
            #define Color8 0.0, 0.5, 1.0
            #define Color9 0.0, 0.0, 1.0
            #define Color10 0.5, 0.0, 1.0
            #define Color11 0.5, 0.0, 1.0
            #define Color12 1.0, 0.0, 0.5
            static int state = 0;
            static int color = 1;
            auto call = id(my_light).turn_on(); //put the id for your light in here
            call.set_white(0.0);
            call.set_transition_length(15000);
            if (state == 0) 
              call.set_brightness(0.02);
            else if (state == 1)
            {
              switch(color)
              {
                case 1: call.set_rgb(Color1);
                        break;
                case 2: call.set_rgb(Color2);
                        break;
                case 3: call.set_rgb(Color3);
                        break;
                case 4: call.set_rgb(Color4);
                        break;
                case 5: call.set_rgb(Color5);
                        break;
                case 6: call.set_rgb(Color6);
                        break;
                case 7: call.set_rgb(Color7);
                        break;
                case 8: call.set_rgb(Color8);
                        break;
                case 9: call.set_rgb(Color9);
                        break;
                case 10: call.set_rgb(Color10);
                          break;
                case 11: call.set_rgb(Color11);
                          break;
                case 12: call.set_rgb(Color12);
                          break;
              }
              call.set_brightness(1.0);
            }
            
            state ++;
            if (state == 2){
            state = 0;
            }
            color++;
            if(color == 7)
            {
              color = 1;
            }
            call.perform();
      - random:
          name: "Insane Random Effect"
          transition_length: 1s
          update_interval: 1s
      - random:          
          name: "Totally Loco Random Effect"
          transition_length: 300ms
          update_interval: 250ms

    # You can define one or more groups of presets. These presets can
    # be activated using various "preset.activate" action options.
    # The presets can for example be used to mimic the behavior of the
    # original firmware (tapping the color button = go to next preset,
    # holding the color button = switch between RGB and white light mode).
    # These bindings have been setup below, using the binary_sensor for
    # the color button.
    presets:
      rgb:
        red:         { red: 100%, green: 0%,   blue: 0%   }
        green:       { red: 0%,   green: 100%, blue: 0%   }
        blue:        { red: 0%,   green: 0%,   blue: 100% }
        yellow:      { red: 100%, green: 100%, blue: 0%   }
        purple:      { red: 100%, green: 0%,   blue: 100% }
        randomize:   { effect: Fast Random                }
      white:
        cold:        { color_temperature: 153 mireds      }
        chilly:      { color_temperature: 275 mireds      }
        luke:        { color_temperature: 400 mireds      }
        warm:        { color_temperature: 588 mireds      }
      color_effects:
        breathing_red: { effect: Breathing Red            }
        christmas:     { effect: Christmas                }

# Binary sensors can be created for handling front panel touch / release
# events. To specify what part of the front panel to look at, the "for"
# parameter can be set to: "POWER_BUTTON", "COLOR_BUTTON" or "SLIDER".
binary_sensor:
  # When tapping the power button, toggle the light.
  # When holding the power button, turn on night light mode.
  - platform: xiaomi_bslamp2
    id: my_power_button
    for: POWER_BUTTON
    on_multi_click:
    - timing:
        - ON for at most 0.8s
      then:
        - light.toggle: my_light
    - timing:
        - ON for at least 0.8s
      then:
        - light.turn_on:
            id: my_light
            brightness: 1%

  # When tapping the color button, activate the next preset.
  # When holding the color button, activate the next preset group.
  - platform: xiaomi_bslamp2
    id: my_color_button
    for: COLOR_BUTTON
    on_multi_click:
      - timing:
          - ON for at most 0.6s
        then:
          - preset.activate:
              next: preset
      - timing:
          - ON for at least 0.6s
        then:
          - preset.activate:
              next: group

# This sensor component publishes touch events for the front panel slider.
# The published value represents the level at which the slider was touched.
# By default, values range from 0.01 to 1.00 (in 20 steps). This range can
# be modified using the "range_from" and "range_to" parameters.
sensor:
  # When the slider is touched, update the brightness.
  # Brightness 0.01 initiates the light night mode, which has already
  # been handled above (by holding the power button). Therefore, brightness
  # starts from 0.02 here, to not trigger night mode using the slider.
  - platform: xiaomi_bslamp2
    id: my_slider_level
    range_from: 0.02
    on_value:
      then:
        - light.turn_on:
            id: my_light
            brightness: !lambda return x;

# This text sensor propagates the currently active light mode.
# The possible light modes are: "off", "rgb", "white" and "night".
text_sensor:
  - platform: xiaomi_bslamp2
    name: ${light_mode_text_sensor_name}
    id: my_light_mode
